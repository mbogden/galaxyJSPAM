'''
    Author:     Matthew Ogden
    Created:    19 May 2019
    Altered:    22 Apr 2020
Description:    *** Converting old to new code *** Main code for all things simulation related
'''

from os import path, listdir
from sys import exit, argv, path as sysPath

# For loading in Matt's general purpose python libraries
supportPath = path.abspath( path.join( __file__ , "../../Support_Code/" ) )
sysPath.append( supportPath )
import general_module as gm
import info_module as im


def main(arg):

    print("Hi!  In Matthew's python template for creating new SPAM related code.")

    if arg.printAll:

        arg.printArg()
        gm.test()
        im.test()
    # end main print
    
    if arg.simple:
        if arg.printAll: print("PT: Simple!~")

    elif arg.runDir != None:
        procRun( arg.runDir, printAll=arg.printAll )

    elif arg.targetDir != None:
        procTarget( arg.targetDir, printAll=arg.printAll )

    elif arg.dataDir != None:
        procAllData( arg.dataDir, printAll=arg.printAll )

    else:
        print("PT: Nothing selected!")
        print("PT: Recommended options")
        print("\t -simple")
        print("\t -runDir /path/to/dir/")
        print("\t -targetDir /path/to/dir/")
        print("\t -dataDir /path/to/dir/")


# End main


def procRun( rDir, printAll=False ):

    if type(rDir) != type('string'):
        print("ERROR: PT: runDir not a string: %s - %s" % ( type(rDir), rDir ) )
        return False

    if not path.exists( rDir ):
        print("ERROR: PT: runDir not found: " % rDir )
        return False

    if arg.printAll: print("PT: runDir: %s" % arg.runDir )

    modelDir = rDir + 'model_images/'
    miscDir = rDir + 'misc_images/'
    ptsDir = rDir + 'particle_files/'
    infoLoc = rDir + 'info.json'

    if not path.exists( modelDir ) or not path.exists( ptsDir ) or not path.exists( infoLoc):
        print("ERROR: PT: A directory was not found in runDir")
        print("\t- modelDir: " , path.exists( modelDir ) )
        print("\t-  miscDir: " , path.exists( miscDir ) )
        print("\t-  partDir: " , path.exists( ptsDir ) )
        return False

    rInfo = im.run_info_class( runDir=rDir, printAll=printAll )
    #rInfo.printInfo()

# end processing run dir


# Process target directory
def procTarget( tDir, printAll=False ):

    if arg.printAll: print("PT: sdssDir: %s" % arg.sdssDir )

    if type(tDir) != type('string'):
        print("ERROR: PT: Target: targetDir not a string: %s - %s" % ( type(tDir), tDir ) )
        return False

    if not path.exists( tDir ):
        print("ERROR: PT: Target: targetDir not found: " % tDir )
        return False

    iDir = tDir + 'information/'
    gDir = tDir + 'gen000/'
    pDir = tDir + 'plots/'

    infoLoc = iDir + 'target_info.json'

    # If not a target folder
    if not path.exists( iDir ) or not path.exists( gDir ):
        print("ERROR: PT: Couldn't find needed folders in targetDir.")
        print("\t- infoDir: " , path.exists( iDir ) )
        print("\t-  genDir: " , path.exists( gDir ) )
        return False

    tInfo = im.target_info_class( infoLoc )

    runDirs = listdir( gDir )
    runDirs.sort()

    for run in runDirs:
        rDir = gDir + run + '/'
        procRun( rDir )

# End processing sdss dir

def procAllData( dataDir, printAll=False ):
    if arg.printAll: print("PT: dataDir: %s" % arg.dataDir )
    print("All data")


# Run main after declaring functions
if __name__ == '__main__':
    arg = gm.inArgClass( argv )
    main( arg )


# everything after this is old and not used.  Please delete or repurpose.
exit()


from sys import (
    argv,
    exit
)

from os import (
    path,
    system,
    getcwd,
    mkdir,
    chdir,
    remove
)

from re import (
    compile,
    match
)

from zipfile import (
    ZipFile,
    ZIP_DEFLATED,
    ZIP_STORED
)

# Global/Input Variables
printAll = True

basicRun = ""  # Set with the required flag -basicRun in new_readArg
if path.isfile("./Simulator/bin/basic_run"):
    basicRun = path.abspath("./Simulator/bin/basic_run")

runDir = ''  # Set in new_readArg
nPart = 0
maxN = 1e6  # Arbitrary limit in case of typo, can be changed if needed

compressFiles = True
overWrite = False


# SE_TODO: Work with this function for main
# Variables are checked to exist in new_readArg function, and sets exitEarly as needed
def simulator_v2(argList):
    # Takes path to info.txt file and returns that file as a list of strings
    def readInfoFile(f):
        if not path.exists(f):
            print("No info.txt found: " + f)
            return []
        file = open(f, 'r')
        res = file.read()
        file.close()
        return list(filter(None, res.split("\n")))

    # Takes list of strings that is the info.txt (As generated by readInfoFile) in question and extracts the model_data
    # information, and returns that
    def getModelData(l):
        if len(l) == 0:
            print("Empty info.txt")
            return

        r = compile(r'^model_data\s(.*)')
        for line in l:
            m = match(r, line)
            if m:
                return m.group(1)

        return ""

    endEarly = new_readArg(argList)  # Checks that things exist, and sets endEarly accordingly
    # Exit program with error
    if endEarly:
        print('Exiting...\n')
        exit(-1)

    # Read info.txt and get model data located in runDir
    md = getModelData(readInfoFile(runDir + "info.txt"))

    if md == "":
        print("Error reading model data from info.txt")
        exit(-1)

    # Double check that the particle_files exists, it should have been made by the pipeline
    if not path.isdir(runDir + "particle_files/"):
        mkdir(runDir + "particle_files/")

    # SE_TODO: Check 'particle_files' folder if particles of nPart size have already been made
    # Ignore if overWrite is true

    # Move active directory into 'particle_files'.
    chdir(runDir + "particle_files/")

    # Call JSPAM!
    runBasicRun(nPart, md)

    # Move the files to the new names
    file_000 = runDir + "particle_files/a_0.000"
    file_101 = runDir + "particle_files/a_0.101"

    if not path.exists(file_000):
        print("No " + file_000 + " found, exiting...")
        exit(-1)

    if not path.exists(file_101):
        print("No " + file_000 + " found, exiting...")
        exit(-1)

    # Zip them for convenience
    # Auto closed on with exit
    with ZipFile(runDir + "particle_files/" + str(nPart) + "_pts.zip", 'w') as myzip:
        myzip.write(file_000, str(nPart) + "_pts.000", compress_type=ZIP_DEFLATED)
        myzip.write(file_101, str(nPart) + "_pts.101", compress_type=ZIP_DEFLATED)

    # Remove the unzipped files and other outputs
    remove(file_000)
    remove(file_101)
    remove(runDir + "particle_files/fort.21")
    remove(runDir + "particle_files/fort.24")
    remove(runDir + "particle_files/fort.50")
    remove(runDir + "particle_files/gmon.out")
    remove(runDir + "particle_files/gscript")
# End simulator_v2

def runBasicRun(nPart, data):
    global basicRun

    sysCmd = '%s -m %d -n1 %d -n2 %d %s' % (basicRun, 0, nPart, nPart, data)

    if printAll:
        print('Running command: ', sysCmd)

    try:
        retVal = system(sysCmd)

        if printAll:
            print("Command Complete: " + str(retVal))
        return True

    except Exception as e:
        print("Failed running command due to: " + e)
        return False
# End runBasicRun

def new_readArg(argList):
    # Global input arguments
    global runDir, nPart, overWrite, basicRun

    # Loop through command line arguments
    for i, arg in enumerate(argList):

        # Ignore argument unless it has '-' specifier
        if arg[0] != '-':
            continue

        # Turns out path.abspath doesn't understand ~
        elif arg == '-runDir':
            runDir = argList[i + 1]
            if runDir[0] == '~':
                runDir = path.expanduser(runDir)
            else:
                runDir = path.abspath(runDir)

            if not runDir[-1] == '/':
                runDir += '/'

        elif arg == '-nPart':
            nPart = argList[i + 1]

        elif arg == '-overWrite':
            overWrite = True

        elif arg == '-basicRun':
            basicRun = argList[i + 1]
            if basicRun[0] == '~':
                basicRun = path.expanduser(basicRun)
            else:
                basicRun = path.abspath(basicRun)

    # Check validity of commandline arguments
    endEarly = False

    # Check if run Dir exists or if not given one
    if not path.isdir(runDir):
        if runDir == '':
            print("ERROR: Please specify path to run directory.")
            print("\t$: python simulator_v2.py -runDir /path/to/runDir ...")
        else:
            print("ERROR: Path to run directory not found: '%s'" % runDir)
        endEarly = True
    # End check runDir

    # Check if basicRun exists
    if not path.isfile(basicRun):
        print("ERROR: Can't find basic_run.")
        print("\tbasic_run location: %s" % basicRun)
        print("\tcurrent location: %s" % getcwd())
        print("\t$: python simulator_v2.py -basicRun /path/basic_run ...")
        endEarly = True

    # Check if number of particles was specified
    if nPart == 0:
        print("ERROR: Please specify number of particles per galaxy.")
        print("\t$: python simulator_v2.py -nPart 1000 ...")
        endEarly = True

    # Check if input particles was an integer
    try:
        nPart = int(nPart)
    except:
        print("ERROR: -nPart is not an integer: '%s'" % nPart)
        nPart = 0
        endEarly = True

    return endEarly
# End new_readArg

# Execute everything after declaring functions
print('')
if __name__ == "__main__":
    argList = argv
    simulator_v2(argList)
print('')
